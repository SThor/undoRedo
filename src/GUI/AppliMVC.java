/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Commands.CommandManager;
import Commands.Mul;
import Commands.Set;
import Model.Model;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import Commands.Command;
import Commands.Macro;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;

/**
 *
 * @author givelpa
 */
public class AppliMVC extends javax.swing.JFrame {

    private Model model;
    private CommandManager commandManager = new CommandManager();
    private List<Macro> macros = new ArrayList<>();
    private DefaultListModel<String> listModelMacros = new DefaultListModel<>();
    private DefaultListModel<String> listModelNewMacro = new DefaultListModel<>();
    private Macro tmpMacro;

    /**
     * Creates new form AppliMVC
     */
    public AppliMVC() {
        initComponents();
        refreshListModel();        
        listMacros.setModel(listModelMacros);
        listMacroCommands.setModel(listModelNewMacro);
        setModel(new Model());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSetters = new javax.swing.JPanel();
        buttonSet10 = new javax.swing.JButton();
        buttonSet20 = new javax.swing.JButton();
        buttonSet30 = new javax.swing.JButton();
        panelCommands = new javax.swing.JPanel();
        buttonMul2 = new javax.swing.JButton();
        buttonMul3 = new javax.swing.JButton();
        buttonDiv2 = new javax.swing.JButton();
        buttonDiv3 = new javax.swing.JButton();
        panelView = new javax.swing.JPanel();
        labelValue = new javax.swing.JLabel();
        textFieldValue = new javax.swing.JTextField();
        labelMean = new javax.swing.JLabel();
        textFieldMean = new javax.swing.JTextField();
        labelNbOfChanges = new javax.swing.JLabel();
        textFieldNbOfChanges = new javax.swing.JTextField();
        panelMetaCommands = new javax.swing.JPanel();
        panelMacros = new javax.swing.JPanel();
        toggleRecording = new javax.swing.JToggleButton();
        panelMacroToggle = new javax.swing.JPanel();
        scrollPaneMacros = new javax.swing.JScrollPane();
        listMacros = new javax.swing.JList<>();
        panelRecording = new javax.swing.JPanel();
        panelMacroName = new javax.swing.JPanel();
        labelMacroName = new javax.swing.JLabel();
        textFieldMacroName = new javax.swing.JTextField();
        scrollPaneMacroCommands = new javax.swing.JScrollPane();
        listMacroCommands = new javax.swing.JList<>();
        buttonSaveMacro = new javax.swing.JButton();
        panelDeferredActions = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        buttonSet10.setText("10");
        buttonSet10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSet10ActionPerformed(evt);
            }
        });
        panelSetters.add(buttonSet10);

        buttonSet20.setText("20");
        buttonSet20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSet20ActionPerformed(evt);
            }
        });
        panelSetters.add(buttonSet20);

        buttonSet30.setText("30");
        buttonSet30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSet30ActionPerformed(evt);
            }
        });
        panelSetters.add(buttonSet30);

        getContentPane().add(panelSetters);

        buttonMul2.setText("x2");
        buttonMul2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMul2ActionPerformed(evt);
            }
        });
        panelCommands.add(buttonMul2);

        buttonMul3.setText("x3");
        buttonMul3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMul3ActionPerformed(evt);
            }
        });
        panelCommands.add(buttonMul3);

        buttonDiv2.setText("/2");
        buttonDiv2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDiv2ActionPerformed(evt);
            }
        });
        panelCommands.add(buttonDiv2);

        buttonDiv3.setText("/3");
        buttonDiv3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDiv3ActionPerformed(evt);
            }
        });
        panelCommands.add(buttonDiv3);

        getContentPane().add(panelCommands);

        panelView.setLayout(new java.awt.GridLayout(3, 2));

        labelValue.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelValue.setText("Value :");
        panelView.add(labelValue);

        textFieldValue.setPreferredSize(new java.awt.Dimension(100, 30));
        panelView.add(textFieldValue);

        labelMean.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelMean.setText("Mean :");
        panelView.add(labelMean);

        textFieldMean.setPreferredSize(new java.awt.Dimension(100, 30));
        panelView.add(textFieldMean);

        labelNbOfChanges.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelNbOfChanges.setText("Number of changes :");
        panelView.add(labelNbOfChanges);

        textFieldNbOfChanges.setPreferredSize(new java.awt.Dimension(100, 30));
        panelView.add(textFieldNbOfChanges);

        getContentPane().add(panelView);

        panelMetaCommands.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelMetaCommands.setLayout(new javax.swing.BoxLayout(panelMetaCommands, javax.swing.BoxLayout.LINE_AXIS));

        panelMacros.setLayout(new java.awt.BorderLayout());

        toggleRecording.setText("Record new macro");
        toggleRecording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRecordingActionPerformed(evt);
            }
        });
        panelMacros.add(toggleRecording, java.awt.BorderLayout.NORTH);

        panelMacroToggle.setLayout(new java.awt.CardLayout());

        listMacros.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scrollPaneMacros.setViewportView(listMacros);

        panelMacroToggle.add(scrollPaneMacros, "scrollPaneMacros");

        panelRecording.setLayout(new javax.swing.BoxLayout(panelRecording, javax.swing.BoxLayout.PAGE_AXIS));

        labelMacroName.setText("Macro name :");
        panelMacroName.add(labelMacroName);

        textFieldMacroName.setPreferredSize(new java.awt.Dimension(100, 30));
        panelMacroName.add(textFieldMacroName);

        panelRecording.add(panelMacroName);

        listMacroCommands.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scrollPaneMacroCommands.setViewportView(listMacroCommands);

        panelRecording.add(scrollPaneMacroCommands);

        buttonSaveMacro.setText("Save macro");
        buttonSaveMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveMacroActionPerformed(evt);
            }
        });
        panelRecording.add(buttonSaveMacro);

        panelMacroToggle.add(panelRecording, "panelRecording");

        panelMacros.add(panelMacroToggle, java.awt.BorderLayout.CENTER);

        panelMetaCommands.add(panelMacros);
        panelMetaCommands.add(panelDeferredActions);

        getContentPane().add(panelMetaCommands);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSet10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSet10ActionPerformed
        Command command = new Set(model, 10);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);            
            listModelNewMacro.add(tmpMacro.getSize()-1, "Set 10");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonSet10ActionPerformed

    private void buttonSet20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSet20ActionPerformed
        Command command = new Set(model,20);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Set 20");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonSet20ActionPerformed

    private void buttonSet30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSet30ActionPerformed
        Command command = new Set(model,30);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Set 30");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonSet30ActionPerformed

    private void buttonMul2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMul2ActionPerformed
        Command command = new Mul(model,2);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Mul 2");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonMul2ActionPerformed

    private void buttonMul3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMul3ActionPerformed
        Command command = new Mul(model,3);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Mul 3");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonMul3ActionPerformed

    private void buttonDiv2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDiv2ActionPerformed
        Command command = new Mul(model, 1.0/2.0);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Div 2");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonDiv2ActionPerformed

    private void buttonDiv3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDiv3ActionPerformed
        Command command = new Mul(model, 1.0/3.0);
        if(toggleRecording.isSelected()){
            tmpMacro.addCommand(command);
            listModelNewMacro.add(tmpMacro.getSize()-1, "Div 3");
        }else{
            commandManager.registerCommand(command);
        }
    }//GEN-LAST:event_buttonDiv3ActionPerformed

    private void toggleRecordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRecordingActionPerformed
        CardLayout cl = (CardLayout)(panelMacroToggle.getLayout());
        if(toggleRecording.isSelected()){
            cl.show(panelMacroToggle, "panelRecording");
            toggleRecording.setText("Recording new macro ...");
            tmpMacro = new Macro("macro"+macros.size());
            textFieldMacroName.setText(tmpMacro.getName());
            listModelNewMacro.clear();
        }else{
            cl.show(panelMacroToggle, "scrollPaneMacros");
            toggleRecording.setText("Record new macro");
        }
    }//GEN-LAST:event_toggleRecordingActionPerformed

    private void buttonSaveMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveMacroActionPerformed
        macros.add(new Macro(tmpMacro));
        refreshListModel();
        toggleRecording.doClick();
    }//GEN-LAST:event_buttonSaveMacroActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDiv2;
    private javax.swing.JButton buttonDiv3;
    private javax.swing.JButton buttonMul2;
    private javax.swing.JButton buttonMul3;
    private javax.swing.JButton buttonSaveMacro;
    private javax.swing.JButton buttonSet10;
    private javax.swing.JButton buttonSet20;
    private javax.swing.JButton buttonSet30;
    private javax.swing.JLabel labelMacroName;
    private javax.swing.JLabel labelMean;
    private javax.swing.JLabel labelNbOfChanges;
    private javax.swing.JLabel labelValue;
    private javax.swing.JList<String> listMacroCommands;
    private javax.swing.JList<String> listMacros;
    private javax.swing.JPanel panelCommands;
    private javax.swing.JPanel panelDeferredActions;
    private javax.swing.JPanel panelMacroName;
    private javax.swing.JPanel panelMacroToggle;
    private javax.swing.JPanel panelMacros;
    private javax.swing.JPanel panelMetaCommands;
    private javax.swing.JPanel panelRecording;
    private javax.swing.JPanel panelSetters;
    private javax.swing.JPanel panelView;
    private javax.swing.JScrollPane scrollPaneMacroCommands;
    private javax.swing.JScrollPane scrollPaneMacros;
    private javax.swing.JTextField textFieldMacroName;
    private javax.swing.JTextField textFieldMean;
    private javax.swing.JTextField textFieldNbOfChanges;
    private javax.swing.JTextField textFieldValue;
    private javax.swing.JToggleButton toggleRecording;
    // End of variables declaration//GEN-END:variables

    public void setModel(Model model) {
        this.model = model;
        
        textFieldValue.setText(""+model.getValue());
        textFieldMean.setText(""+model.getMean());
        textFieldNbOfChanges.setText(""+model.getNbChanges());
        
        model.addPropertyChangeListener(model.PROPERTY_VALUE, (evt) -> {
            textFieldValue.setText(""+model.getValue());
        });
        model.addPropertyChangeListener(model.PROPERTY_MEAN, (evt) -> {
            textFieldMean.setText(""+model.getMean());
        });
        model.addPropertyChangeListener(model.PROPERTY_NBCHANGES, (evt) -> {
            textFieldNbOfChanges.setText(""+model.getNbChanges());
        });
    }
    
    public Model getModel(){
        return this.model;
    }

    private void refreshListModel() {
        listModelMacros.clear();
        for (int i=0;i<macros.size();i++) {
            listModelMacros.add(i, macros.get(i).getName());
        }
    }
}
